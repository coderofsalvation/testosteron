#!/bin/bash 
#
# Copyright 2014 Coder of Salvation. All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification, are
# permitted provided that the following conditions are met:
# 
#    1. Redistributions of source code must retain the above copyright notice, this list of
#       conditions and the following disclaimer.
# 
#    2. Redistributions in binary form must reproduce the above copyright notice, this list
#       of conditions and the following disclaimer in the documentation and/or other materials
#       provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY Coder of Salvation AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL Coder of Salvation OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# The views and conclusions contained in the software and documentation are those of the
# authors and should not be interpreted as representing official policies, either expressed
# or implied, of Coder of Salvation 
# 
SELF_PATH="$(dirname "$(readlink -f "$0")" )"; cd "$SELFPATH"
LOGFILE="$SELF_PATH/testosteron.log"
TMPFILE="/tmp/testosteron.$(whoami)"
export LC_ALL=C # needed so unix 'sort' works properly with '-' and numbers
# these vars keep track of most important things
FAIL=0; PASS=0; FILES=()

# colors 
C_NORMAL="\\033[0;0m"; C_BOLD="\E[1;37;40m"; C_BRIGHT="\E[1;33;40m"
C_GREEN="\\033[1;32m"; C_RED="\\033[0;31m";  C_GREY="\\033[1;30m"
C_RESET="\\033[0m"

##########################################################
# Utility functions

_tprintf(){
  LABEL="testosteron> " _printf "$1"
}

_printf(){
  [[ -n $LABEL ]] && label="$LABEL" || label="$(cat /proc/loadavg | awk '{ print $1" "$2; }') $(free -t | grep Total | awk '{ printf $3}') $(date +%m:%N)"
  printf "$C_GREY""%s""$C_NORMAL %s\n" "$label" "$1"
}

_printcolumn(){
  printf "$C_GREY""%-4s %-4s %-7s %s\n" "cpu"  "i/o" "memory" "time"
  printf "$C_GREY""____ ___  _______ ____________\n"
}

_cleanup(){
  [[ -f $TMPFILE.fail ]] && exitcode=1 || exitcode=0
  rm -f "$TMPFILE.*" &>/dev/null
  exit $exitcode
}

_init(){
  :>$LOGFILE 
}

_throw_error(){
  ((FAIL=FAIL+1)); ERRORFILES+=("$1")
  printf "$C_RED""ERROR: $C_BOLD :(\n"
  touch $TMPFILE.fail # whatever happens, testosteron did not pass all tests if this file exists
}

_readfiles(){
  find -L "$1" -type f | sort -n  > $TMPFILE.files 
  while read file; do FILES+=("$(readlink -f "$file")"); done < $TMPFILE.files
}

_overview(){
  total=${#FILES}
  succes=$(( ${#FILES} - FAIL ));
  _tprintf "tests executed: $total";
  _tprintf "tests succes  : $succes";
  _tprintf "tests fail    : $FAIL";
  for file in "${ERRORFILES[@]}"; do 
    _tprintf "  -> $file";
  done
}

#_usage(){
#  echo "Usage: "
#  grep "^[^_].\+(){$" $0 | while read line; do
#    local cmd=$(echo "$line" | sed "s/(){//g")
#    local info=$(grep -C0 -A0 -B1 "$cmd(){" $0 | sed "N;s/\n.*//g;" )
#    local me=$(basename $0)
#    printf "  $me %-5s %-40s\n" "$cmd" "$info" | grep "#" | sed 's/#//g'
#  done; echo "";
#  printf "\nHINT: for branchspecific deployments one can use environment variables:\n"
#  printf "\n  deployogi init .\n  mv deployogi.d deployogi.d.foo\n  DEPLOYOGIDIR=deployogi.d.foo deployogi deploy\n"
#}

# filters out escape codes
_filterescape(){
  sed -i -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g" "$1"
}

##########################################################
# Application functions

# <dir>        - runs all tests found in dirs (recursively)
rundir(){
  dir="$1";
  [[ ! -d "$dir" ]] && { _tprintf "$dir: no such dir"; exit 1; }
  _readfiles "$dir"
  for file in "${FILES[@]}"; do run "$file"; done 
  _overview
  exit 0
}

# <file>        - runs all tests found in dirs (recursively)
run(){
  file="$(basename "$1")"; path="$(dirname "$1" )";
  printf "$C_BOLD""==> ""$C_GREEN"" $file $C_RESET\n\n"
  _printcolumn; 
  cd "$path"; { ${PREFIX} ./$file || _throw_error "$file";} > $TMPFILE.out 
  while read line; do _printf "$line"; done < $TMPFILE.out
  echo ""
  cd "$SELF_PATH" &>/dev/null
} 

##########################################################
# Main entry 

trap _cleanup SIGTERM 0 1 2 3 15
{
  _init && [[ -n "$1" ]] && "$@" || _usage
} | tee -a $LOGFILE
_filterescape "$LOGFILE"
  
